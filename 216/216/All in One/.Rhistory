knitr::opts_chunk$set(echo = FALSE, warning=FALSE,message=FALSE)
library(tidyverse)
library(extraDistr)
Binom_plotter<-function(n,p,lb,ub){
x<-seq(0,n)
hx<-dbinom(x,n,p)
i<-x>= lb & x<= ub
hxi<-dbinom(x[i],n,p)
plot(x,hx,type='h', xlim=c(0,n),ylim=c(0,max(hx)))
if (lb>=0&lb<=n){
abline(v=lb,lty=3,col='blue')
}
if (ub>=0&ub<=n){
abline(v=ub,lty=3,col='blue')
}
par(new=T)
plot(x[i],hxi,type='h', col="red", xlim=c(0,n),ylim=c(0,max(hx)),xlab="",ylab="" )
par(new=F)
area <- pbinom(ub, n, p) - pbinom(lb, n, p) + dbinom(lb,n,p)
result <- paste("P(",lb,"\u2264 X \u2264",ub,") =",
signif(area, digits=3), "\n",
"n=", n, " p=", p)
mtext(result,3)
}
knitr::opts_chunk$set(echo = TRUE)
data0 <- read.csv("US_STATES.csv")
x <- data0$Murder
# calculate the uniform probabilities
y_uniform<- ddunif(x_uniform,min=min(data0$Murder),max=max(data0$Murder))
x_uniform <- data0$Murder
# calculate the uniform probabilities
y_uniform<- ddunif(x_uniform,min=min(data0$Murder),max=max(data0$Murder))
# plot the distribution
plot(x_uniform,y_uniform, type='h')
x_uniform <- data0$Murder
# calculate the uniform probabilities
y_uniform<- ddunif(x_uniform,min=0,max=max(data0$Murder))
# plot the distribution
plot(x_uniform,y_uniform, type='h')
x_uniform <- data0$Murder
# calculate the uniform probabilities
y_uniform<- ddunif(x_uniform,min=0,max=30)
# plot the distribution
plot(x_uniform,y_uniform, type='h')
x_uniform <- data0$Murder
# calculate the uniform probabilities
y_uniform<- ddunif(x_uniform,min=0,max=100)
# plot the distribution
plot(x_uniform,y_uniform, type='h')
x_uniform <- data0$Murder
# calculate the uniform probabilities
y_uniform<- ddunif(x_uniform,min=0,max=1000)
# plot the distribution
plot(x_uniform,y_uniform, type='h')
x_uniform <- data0$Murder
# calculate the uniform probabilities
y_uniform<- ddunif(x_uniform,min=0,max=3000)
# plot the distribution
plot(x_uniform,y_uniform, type='h')
x_uniform <- data0$Murder
# calculate the uniform probabilities
y_uniform<- ddunif(x_uniform,min=0,max=1)
# plot the distribution
plot(x_uniform,y_uniform, type='h')
x_uniform <- data0$Murder
# calculate the uniform probabilities
y_uniform<- ddunif(x_uniform,min=0,max=15)
# plot the distribution
plot(x_uniform,y_uniform, type='h')
# define the x-axis
x_uniform<-seq(1,30, length=30)
# calculate the uniform probabilities
y_uniform<- ddunif(x_uniform,min=1,max=30)
# plot the distribution
plot(x_uniform,y_uniform, type='h')
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(extraDistr)
hist(data0$LifeExp)
library(car)
qqPlot(data0$LifeExp)
Binom_plotter<-function(n,p,lb,ub){
x<-seq(0,n)
hx<-dbinom(x,n,p)
i<-x>= lb & x<= ub
hxi<-dbinom(x[i],n,p)
plot(x,hx,type='h', xlim=c(0,n),ylim=c(0,max(hx)))
if (lb>=0&lb<=n){
abline(v=lb,lty=3,col='blue')
}
if (ub>=0&ub<=n){
abline(v=ub,lty=3,col='blue')
}
par(new=T)
plot(x[i],hxi,type='h', col="red", xlim=c(0,n),ylim=c(0,max(hx)),xlab="",ylab="" )
par(new=F)
area <- pbinom(ub, n, p) - pbinom(lb, n, p) + dbinom(lb,n,p)
result <- paste("P(",lb,"\u2264 X \u2264",ub,") =",
signif(area, digits=3), "\n",
"n=", n, " p=", p)
mtext(result,3)
}
x<-pbinom(q=3,size=20,prob=0.6)
Binom_plotter(20, x, 3)
x<-pbinom(q=3,size=20,prob=0.6)
Binom_plotter(20, x, 0, 3)
x<-pbinom(q=13,size=20,prob=0.6)
Binom_plotter(20, 0.6, 0, 13)
pbinom(q=12,size=20,prob=0.6)
Binom_plotter(20, 0.6, 0, 12)
pbinom(q=12,size=20,prob=0.6)
Binom_plotter(20, 0.6, 0, 11)
dbinom(13, 20, 0.6)
Binom_plotter(20, 0.6, 13, 13)
dbinom(13, 20, 0.6)
Binom_plotter(20, 0.6, 0, 13)
dbinom(13, 20, 0.6)-dbinom(4, 20, 0.6)
Binom_plotter(20, 0.6, 0, 13)
dbinom(13, 20, 0.6)-dbinom(4, 20, 0.6)
Binom_plotter(20, 0.6, 4, 13)
dbinom(13, 20, 0.6)-dbinom(4, 20, 0.6)
Binom_plotter(20, 0.6, 5, 13)
dbinom(13, 20, 0.6)-dbinom(4, 20, 0.6)
Binom_plotter(20, 0.6, 5, 13)
dbinom(13, 20, 0.6)-dbinom(4, 20, 0.6)
Binom_plotter(20, 0.6, 5, 13)
dbinom(13, 20, 0.6)-dbinom(4, 20, 0.6)
Binom_plotter(20, 0.6, 5, 13)
dbinom(13, 20, 0.6)-dbinom(4, 20, 0.6)
Binom_plotter(20, 0.6, 4, 13)
dbinom(13, 20, 0.6)-dbinom(4, 20, 0.6)
Binom_plotter(20, 0.6, 5, 13)
dbinom(13, 20, 0.6)-dbinom(5, 20, 0.6)
Binom_plotter(20, 0.6, 5, 13)
dbinom(13, 20, 0.6)-dbinom(4, 20, 0.6)
Binom_plotter(20, 0.6, 5, 13)
dbinom(13, 20, 0.6)
Binom_plotter(20, 0.6, 5, 13)
pbinom(13, 20, 0.6)-pbinom(4, 20, 0.6)
Binom_plotter(20, 0.6, 5, 13)
pbinom(13, 20, 0.6)-pbinom(4, 20, 0.6)
Binom_plotter(20, 0.6, 4, 13)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(extraDistr)
dbinom(1,5, .2)
pbinom(q=13,size=20,prob=0.6)
Binom_plotter(20, 0.6, 0, 13)
qbinom(p=0.2,size=3)
dbinom(p=0.2,size=3, q=0.8)
pbinom(p=0.2,size=3, q=0.8)
Binom_plotter(3, 0.2, 0, 0.8)
pbinom(p=0.2,size=3, q=0.8)
Binom_plotter(3, 0.2, -0.8, 0.8)
pbinom(p=0.2,size=3, q=0.8)
Binom_plotter(3, 0.2, 0, 0.8)
pbinom(p=0.2,size=3, q=0.8)
Binom_plotter(3, 0.2, -0.8, 0.8)
pbinom(p=0.2,size=3, q=0.8)
Binom_plotter(3, 0.2, 0, 11)
pbinom(p=0.2,size=3, q=0.8)
Binom_plotter(3, 0.2, 0, 1)
pbinom(p=0.2,size=3, q=0.8)
Binom_plotter(3, 0.2, 0, 0.8)
dbinom(3, 3, 0.2)
pbinom(q=0.2,size=3,prob=0.2)
Binom_plotter(3, 0.2, 0, 11)
pbinom(q=0.2,size=3,prob=0.2)
Binom_plotter(3, 0.2, -11, 11)
pbinom(q=0.2,size=3,prob=0.2)
Binom_plotter(3, 0.2, 0, 11)
pbinom(q=11,size=3,prob=0.2)
Binom_plotter(3, 0.2, 0, 11)
pbinom(q=0.8,size=3,prob=0.2)
Binom_plotter(3, 0.2, 0, 11)
pbinom(q=0.8,size=3,prob=0.2)
Binom_plotter(3, 0.2, 0, 3)
pbinom(q=0.8,size=3,prob=0.2)
Binom_plotter(3, 0.2, 0, 3)
dbinom(0, 3,  0.2)+dbinom(1, 3, 0.2)+dbinom(2, 3, 0.2)+dbinom(3, 3, 0.2)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(extraDistr)
CI_stat <- function(x_bar,n, PopSDknown, SD, ConfCoef, digit ){
# x_bar is the sample mean
# n is the sample size
# PopSDknown should be "Yes" or "No", whether the Population standard deviation is known or not
# SD is the pop sd or sample sd, depends on the input of PopSDknown
# ConfCoef is the confidence coefficient, should be a real number between 0 and 1.
# digit is the number of digits you want to present in the CI
confLv <- ConfCoef*100
if (PopSDknown == "Yes"){
crval <- qnorm((1+ConfCoef)/2)
output1 <- paste("The population standard deviation is", bquote(.(SD)))
}
else if (PopSDknown == "No"){
crval = qt((1+ConfCoef)/2,n-1)
output1 <- paste("The population standard deviation is unknown.")
}
ci_ub <- round(x_bar + crval*SD/sqrt(n),digit)
ci_lb <- round(x_bar - crval*SD/sqrt(n),digit)
cat(output1,"\nThe sample size is", bquote(.(n)), ". The sample mean is", bquote(.(x_bar)), ". The sample standard deviation is", bquote(.(SD)),"\nThe", bquote(.(confLv)), "% Confidence Interval for the population mean is (", bquote(.(ci_lb)), bquote(.(ci_ub)), ").\n" )
}
CI_stat(x_bar=4.5, n=100, PopSDknown="yes", SD=4, ConfCoef=0.95, digit=4)
CI_stat(x_bar=4.5, n=100, PopSDknown="Yes", SD=4, ConfCoef=0.95, digit=4)
dataCI <- read.csv("Note17Example.csv")
CI_data <- function(data, PopSDknown, PopSDvalue, ConfCoef, digit ){
# data should be a column of numeric data
# PopSDknown should be "Yes" or "No", whether the Population standard deviation is known or not.
# PopSDvalue should be the value of the pop sd value. If pop sd is NOT known, just input 0.
# ConfCoef is the confidence coefficient, should be a real number between 0 and 1.
# digit is the number of digits you want to present in the CI
x_bar <- mean(data)
n <- length(data)
confLv <- ConfCoef*100
if (PopSDknown == "Yes"){
crval <- qnorm((1+ConfCoef)/2)
SD <- PopSDvalue
output1 <- paste("The population standard deviation is", bquote(.(PopSDvalue)))
}
else if (PopSDknown == "No"){
crval = qt((1+ConfCoef)/2,n-1)
SD <- sd(data)
output1 <- paste("The population standard deviation is unknown.")
}
ci_ub <- round(x_bar + crval*SD/sqrt(n),digit)
ci_lb <- round(x_bar - crval*SD/sqrt(n),digit)
cat(output1,"\nThe sample size is", bquote(.(n)), ". The sample mean is", bquote(.(x_bar)), ". The sample standard deviation is", bquote(.(sd(data))),"\nThe", bquote(.(confLv)), "% Confidence Interval for the population mean is (", bquote(.(ci_lb)), bquote(.(ci_ub)), ").\n" )
}
dataCI <- read.csv("Note17Example.csv")
CI_data(data=dataCI$Data, PopSDknown="No", PopSDvalue=0, ConfCoef=0.95, digit=4)
library(shiny); runApp('C:/Users/cjbar/Desktop/216/Lab5/CLTapp.R')
