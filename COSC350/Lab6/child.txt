#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <fcntl.h>
#include <sys/types.h>
#include <sys/stat.h>
#define BUFFER_SIZE 

void err_sys(char *str)
{
	printf("%s\n", str);
	exit();
}

// simple function to check if a character is a digit
int isDigit(char buf)
{
	int result = ;
	// if char is a number then return true
	if(buf <= '' && buf >= '')
		result = ;
	// if char is not a number then return false
	return result;
}

int main(int argc, char *argv[])
{
	if(argc !=)
		err_sys("Insufficient Arguments");

	umask();
	// open the file given
	int indes = open(argv[], O_RDONLY);
	//create buffer var and  output descriptors
	char buf;
	int outdes, outdes, offset = ;

	// check that the input file opened correctly
	if(indes == -)
		err_sys("File open error");

	pid_t pid;

	// fork the process
	pid = fork();

	// if child then open the child file
	if(pid == )
		if((outdes=open("child.txt", O_WRONLY | O_CREAT, )) < )
			err_sys("open fail");
	// if parent then open parent file
	if(pid != )
		if((outdes=open("parent.txt", O_WRONLY | O_CREAT, )) < )
			err_sys("open fail");

	
	// while a char is read loop through the file and pread the current char to avoid race condition
	while(pread(indes, &buf, BUFFER_SIZE, offset)>){
		if(pid == ){ // if currently on the child then take in the non numeric chars
			if(!isDigit(buf) || buf == '\n')
				write(outdes, &buf, );
			
		}else { // if parent take in numeric char
			if(isDigit(buf) || buf == '\n')
				write(outdes, &buf, );	
		}
		offset++;
	}


	close(indes);
	close(outdes);
	close(outdes);

	return ;
}
